=====================
Satchmo documentation
=====================


.. contents:: Table of Contents
    
Introduction
------------

History
~~~~~~~
Like most Open Source projects, Satchmo was started to "scratch an itch."  This
particular itch was to create a framework for developing shopping cart software
using the Django framework.  After a little bit of discussion on the Django list, 
we created our own project in April 2006.

Project Mission
~~~~~~~~~~~~~~~
Satchmo's mission is to use Django to create an open source framework for creating 
unique and robust online stores. To provide maximum flexibility, Satchmo is licensed 
under the BSD license.

Features
~~~~~~~~
Satchmo is built using the Django framework.  Using this framework has a number 
of advantages for building an online shopping site.  Some of them include:

-   A built in Object-relational mapper makes it easy to create and/or modify our 
    models and have the underlying database created for you.  The ORM also makes it 
    easy to make simple references to complex relationships without being an SQL 
    expert.  If you need to drop down to SQL you can.
-   An automatic admin interface makes it easy for you to get up and running 
    quickly and see all the data in an easy to use set of forms.  The permission 
    system also allows you to give selective access to different people on your 
    team.
-   Flexible URL design that is helpful for making your site look professional 
    and show up well in search engines.
-   Powerful template system that allows you to configure every aspect of your 
    site.  The included reference implementation shows you a very basic site but 
    with Django's template you can easily make your site as unique and complex as 
    you'd like.
-   Proven performance including a robust caching system.  This is one of the 
    most critical aspects of an online store.  If you make it big and realize your 
    old site can't handle the load, you're in a difficult place.
-   Security is also a primary component for any online site these days.  
    Django's session management capabilities makes it more secure by not encoding 
    session ID's in urls so that session-ID theft is not possible via the "Referrer" header.  
    Also, Django takes care of escaping SQL statements so that SQL injection attacks are    
    not possible.
-   Robust internationalization support in all phases of a project allow you to 
    tailor your site to different countries and languages.

Django clearly sets Satchmo up to be a robust framework for your store.  The 
Satchmo framework is still in it's early stages but already provides a number 
of very sophisticated features.  Some highlights include:

-   A robust customer model that allows you to maintain unlimited addresses for 
    each of your customers as well as customer specific notes and information.
-   Customer orders can have multiple statuses so it's easy for you to track your 
    interactions
-   A full localization model that is pre-loaded with over 250 countries and 
    information about their subdivisions including states, counties or other 
    divisions.
-   An extremely flexible category model that allows you to have deeply nested 
    categories to help your users find products quickly.
-   A sophisticated product model that allows you to describe and categorize the 
    products as well as link them to related products.  You can feature certain 
    products and store item dimensions in order to use for product shippping.  You 
    can also associate as many product options (sizes, colors, etc) with a product 
    and manage them in a very simple way.  This feature allows you to manage a 
    large number of unique products without a lot of very time consuming steps.  
    Each of these unique items can have price changes or other configurable changes 
    based on your needs.
-   Products also have the capability to have multiple images associated with 
    them.  Each image is automatically scaled to a thumbnail size of your choosing 
    and is automatically cached for maximum performance.
-   Support for Authorize.net credit card processing.
-   Support for invoice, packing slip and shipping label creation and printing.

Models are currently in place to allow additional shipping and payment options 
as well as flexible discount options.

Current Development Status
~~~~~~~~~~~~~~~~~~~~~~~~~~
Satchmo is currently in beta status.  The majority of the framework is in place and
working correctly for many cases. There may be some minor changes but we always clearly
document any backwards incompatible changes.

Requirements
------------
Satchmo is based on the Django framework, therefore you do need a fully functioning 
Django instance to use Satchmo.  The `Django installation guide`_ will step you 
through the process. 

There are a number of other Python packages that are required for usage of all the 
features in Satchmo.

- `Python Imaging Library`_
- `Elementtree`_ (included in Python 2.5+)
- `Python cryptography toolkit`_ ('Python cryptography toolkit(windows)'_)
- `ReportLab`_
- `Tiny RML2PDF`_ (`download link`_)
- `django-comment-utils`_ which must be on your PYTHONPATH
- `Django Registration`_

The following packages are optional but encouraged:

- `DocUtils`_


Installation
------------
This guide assumes that Django is properly installed and that you have installed the
dependencies mentioned in the `Requirements`_ section.

1. Get the latest Satchmo source::

        svn co svn://satchmoproject.com/satchmo/trunk/
        
The next two steps depend on whether or not Satchmo is a standalone project or just an app that
is part of another Django project.

If Satchmo is a standalone app (follow steps 2 and 3):

2.  Modify Satchmo's default settings-customize.py file::
    cp settings-customize.py settings.py
    
3.  Modify settings.py to reflect your setup.

If Satchmo is part of another Django app (follow step 4):

4. Modify you project settings.py file so that it has the following line at the end::

        from local_settings import *
    
5.  Create your customized local_settings.py file::
    
        cp local_settings-customize.py local_settings.py

6.  Edit this local_settings.py file for your setup. The following values need to be changed::

        DATABASE_NAME = 'Your DB Name Here'
        DATABASE_PASSWORD = 'Your DB Password Here'
        DATABASE_USER = 'Your DB User Here'
        SECRET_KEY = 'Your secret key here'
        
        Any other values that are applicable to your setup

.. warning::
    The next step can erase data in the satchmo database. Be sure to have a backup of any critical data

7.  Load the sample data::

        python load_data.py
    
8.  When prompted, enter Yes to all the questions.  This script will also install the i18n data.

9.  Start up the sample webserver to see your store::

        python manage.py startserver
        
10.  In order to see your sample store, point your browser to::
    
        http://localhost/store to see your store

11.  If you want to see the admin interface, point your browser to::

        http://localhost/admin

.. note::
    The above urls will be dependent on your Django setup.  If you're running the webserver on the
    same machine you're developing on, the above urls should work.  If not, use the appropriate url.
    
Basic Configuration
-------------------
If you followed the steps above, you should have a basic store to start playing with.  There are a
number of places you might want to configure.

1. In the settings.py (or local_settings.py) file, there are a number of general Django settings.  However, there are a
   few that are specific to Satchmo.

    - SHOP_BASE is used as the prefix for your store.  In the default setting, your store is 
      located at www.yourname.com/shop.  If you would like to change this setting, this is the 
      place to do it.
    - LOCAL_DEV is used to make sure static files are served properly when developing.  This must
      be set to FALSE when you deploy your site.
    - CURRENCY is the currency symbol to use within the store.
    - Make sure that your DATABASE_ENGINE variable is also set correctly.
    - You should ensure that all of your paths are setup correctly.  Key ones to look at are:
        
        + MEDIA_ROOT (this is where images will be stored)
        + MEDIA_URL
        + ADMIN_MEDIA_PREFIX
        + TEMPLATE_DIRS
        
2. The local_settings.py file also includes information for configuring `Authorize.net`_.  Make changes
   here if you are planning to use this service.  *Note:* After [758], you manage the authorize.net and
   all other payment modules from your ShopOptions page, not in your local_settings file.
   
3. The load_data.py script is helpful during testing. Make sure the following values are set in your
local_settings.py file:

    - SITE_DOMAIN = "example.com"
    - SITE_NAME = "My Site"

Module Configurations
~~~~~~~~~~~~~~~~~~~~~

There are a number of additional places where you can customize Satchmo for your needs.

One setting that will need to be modified is the payment processor you need to use for processing
credit cards.  A module for `Authorize.net`_ is included but not installed by default.  A dummy module
is installed that does nothing but return a true value.  To change to authorize.net, change the import
statement in satchmo/shop/views/checkout-step3 from::
    
    #from satchmo.payment.modules.authorizenet import PaymentProcessor
    # Change this to your appropriate payment processor
    from satchmo.payment.modules.dummy import PaymentProcessor
    
to::

    from satchmo.payment.modules.authorizenet import PaymentProcessor
    # Change this to your appropriate payment processor
    #from satchmo.payment.modules.dummy import PaymentProcessor
    
Satchmo allows very flexible shipping calculations.  You will want to tailor the default ones stored
in /satchmo/shipping/modules.py.  The API is fairly simple but will be covered in more detail later
in this document.

Satchmo has support for selling taxable products.  Since tax calculations include many different 
calculations, you can modify the tax calculations using the objects in /satchmo/tax/modules.py.  The
API will be covered in more detail later in this document.

Loading Data
~~~~~~~~~~~~



Setting up your store
---------------------

Framework design
----------------

Models
~~~~~~
The following diagrams show all of the current models, their data elements and their relationships.

Contact
+++++++
.. image:: contact.gif

Discount
++++++++
.. image:: discount.gif

Payment
+++++++
.. image:: payment.gif

Product
+++++++
.. image:: product.gif

Shipping
++++++++
.. image:: shipping.gif

Shop
++++
.. image:: shop.gif

Supplier
++++++++
.. image:: supplier.gif

Tax
+++
.. image:: tax.gif

Thumbnails
++++++++++

Templates
~~~~~~~~~

- Base site
- Email
- PDF


Module APIs
~~~~~~~~~~~

- Shipping
- Payment
- Tax

Roadmap
-------


.. _Django installation guide: http://www.djangoproject.com/documentation/install/
.. _Python Imaging Library: http://www.pythonware.com/products/pil/
.. _Elementtree: http://effbot.org/zone/element-index.htm
.. _Python cryptography toolkit: http://www.amk.ca/python/code/crypto
.. _Python cryptography toolkit(windows): http://www.voidspace.org.uk/python/modules.shtml#pycrypto
.. _ReportLab: http://www.reportlab.org/
.. _DocUtils: http://docutils.sourceforge.net/
.. _Webda: http://webda.python-hosting.com/
.. _Authorize.net: http://www.authorize.net/
.. _Tiny RML2PDF: http://www.openreport.org/index.py/static/page/trml2pdf
.. _download link: http://tinyforge.org/frs/download.php/1/trml2pdf.tar.gz
.. _Django Registration: http://code.google.com/p/django-registration/
.. _django-comment-utils: http://code.google.com/p/django-comment-utils/
